for developers/instruction, else look at the nicely formatted explained README.md file.
console depiction, followed by a class and method description:

admin credentials: username: admin, password: adminPass

files: file for account request - existingRequests.txt , file for exisiting accounts (with their corresponding deposit and withdrawal history) - exisitingAccount.txt, file for account deletion requests - deletionRequests.txt. Passwords hashed when stored in any sort of file, to make sure nobody can read them.

The admin authentication should already be decided before the program begins. So the username and password are not chosen by the admin logging in, but should be known beforehand and included in the code(username and password depicted above).


Everything, all interactions and menus displayed below are displayed and entered in the console.


- When the program gets started, the following main menu should get displayed:
——————————
Welcome to the best banking app!
(1) New user registration
(2) Existing user login
(3) Admin access
(4) Exit program
——————————
Choose an option:

- after a selection is made the user transferred to another menu depending on their choice.

- if the user chose 1 for a new user the following form should be displayed ( and aftering filling out the information, the user should be redirected back to the main page):

——————————
Please fill out the following form:

Username:
Password:
Name:
Initial deposit (minimum $100):
Age:
Credit score:
——————————

- if the user chose 2, the following authentication page should be displayed:

——————————
Welcome back!

Please enter your credentials:

Username:
Password:
——————————

- if the user chose 3, the following authentication page shoulde be displayed:

——————————
Welcome Admin!

Please enter your credentials:

Username:
Password:
——————————


- if the user chose 4, the program ends.

- In the case of an incorrect username and password. The following alert should be displayed in the console, and the user is redirected back to the main menu.


——————————

Oh, oh - it looks like such credentials do not exist :(

Redirecting you back to main menu….


——————————

- when an exisiting user enters correct credentials, they should see the following menu:

——————————
Welcome back!

Welcome back!
(1) Withdraw
(2) Deposit
(3) View transaction history
(4) Display balance
(5) Request account deletion
(6) Exit and return to main menu
Choose an option:
——————————



- if the existing user enters (1). The will then be asked how much they want to withdraw. If they attempt to withdraw more than existing funds, an alert message is displayed that this is not allowed and the user is sent back to the exisiting user main menu. The amount with the current date is added to the transaction history of the user.
- if the existing user enters (2). The user is then asked how much they want to deposit. They select the amount and the money is added to their balance.  The amount with the current date is added to the transaction history of the user.
- if the existing user enters (3). The user is shown all previous transactions with the trasactio type, amount and date.(e.g. Type: deposit, Amount: $1234.00, Date: 2024-05-05 09:39:07). The user is automatically returned to the main user menu after the transactio history is displayed.
- if the exisiting user enters (4). The user is shown their current balance.
- if the existing user enters (5). The user is then asked: Are you sure? Enter (1) to confirm, enter (2) to return  menu.  If the user confirm with (1) that they want their account to be deleted. They are automatically logged out back to the entry main menu, and their account details is added to the file of account deletion request, where it can later be viewed and deleted by an admin. If the user enters (2), the the user remains in the current user session and the user menu is shown once again.
- if the existing user enters (6). The user is logged out and returned to main entry menu.

- when the admin enters correct credentials, they should see the following menu:

——————————
Welcome back!
(1) View account requests for creation
(2) View account requests for deletion
(3) Display existing accounts
(4) Approve account creation requests
(5) Approve account deletion requests
(6) Exit and return to the main menu
Choose an option:
——————————


- if the admin selects (1). The file with the file creation request should be read. After it is read, all requests should be displayed.
- if the admin selects (2). The file with the file deletion requests should be read. After it is read, all requests should be displayed.
- if the admin selects (3). The file with the file with existing users will be be read. After it is read, all current accounts should be displayed.
- if the admin selects (4). Then the user is asked to type in the username of the user that they want to approve. If the username exists, the account is created, and added to the file of exisiting users, and the account is removed from the account request files.
- if the admin selects (5). Then the user is asked to type in the username of the user that they want to approve for deletion. If the username exists, the account is deleted, and removed from file of exisiting users, and the account is removed from the account deletion files.
- if the admin selects (6). The admin is logged out and returned to main menu.
- Then the admin is returned to the admin main menu.


——————————


Main Classes
1. MainApp
    * Description: Entry point for the application.
    * Responsibilities:
        * Displays the main menu and handles navigation to user, admin, or exit based on the user’s choice.
        * Utilizes the UserManager and AdminManager for user and admin-related operations.
    * Methods:
        * main(String[] args): Initializes the application and loops through the main menu options.
2. UserManager
    * Description: Handles operations related to user accounts, including registration, login, and transaction management.
    * Responsibilities:
        * Manages new user registration, login, and session management.
        * Manages individual user transactions like deposits and withdrawals.
    * Methods:
        * handleNewUser(): Registers a new user and saves the account request for approval.
        * handleExistingUser(): Authenticates an existing user and redirects to the user menu.
        * showUserMenu(String username): Provides the user menu options for transactions, balance, and history.
3. AdminManager
    * Description: Manages admin functions such as approving new accounts, deleting accounts, and viewing accounts and requests.
    * Responsibilities:
        * Authenticates admin credentials and provides the admin menu.
        * Manages approval of account creation and deletion requests.
    * Methods:
        * handleAdmin(): Authenticates an admin and redirects to the admin menu.
        * approveAccountCreation(): Approves a new account request.
        * approveAccountDeletion(): Approves a request for account deletion.
        * showAdminMenu(): Displays the admin menu with account-related options.
4. Account
    * Description: Represents a user account with attributes like username, password, name, age, credit score, and balance.
    * Responsibilities:
        * Manages individual user transactions like deposits and withdrawals.
        * Keeps a transaction history and provides account information.
    * Methods:
        * displayBalance(): Displays the current balance.
        * withdraw(double amount): Withdraws a specified amount from the balance.
        * deposit(double amount): Deposits a specified amount to the balance.
        * showHistory(): Displays the transaction history.
        * requestDeletion(): Requests the deletion of the account.
        * addTransaction(Transaction transaction): Adds a transaction to the transaction history.
5. Transaction
    * Description: Represents a transaction with attributes like type (deposit, withdrawal), amount, and date.
    * Responsibilities:
        * Captures the details of a financial transaction.
    * Methods:
        * getType(), getAmount(), getDate(): Getters for the transaction attributes.
        * toString(): Returns a formatted string representation of the transaction.

Utility and Storage Classes
1. FileHandler
    * Description: Handles reading and writing to files (accounts, transactions, requests for creation and deletion).
    * Responsibilities:
        * Ensures the existence of required files and handles data serialization.
        * Manages account requests, existing accounts, and deletion requests.
    * Methods:
        * ensureFilesExist(): Ensures the necessary files are created.
        * saveAccountRequest(Account account): Saves a new account request for approval.
        * isDuplicateAccountRequest(String username): Checks for duplicate account creation requests.
        * displayAccountRequests(): Displays all pending account requests.
        * displayDeletionRequests(): Displays all pending deletion requests.
        * displayExistingAccounts(): Displays all existing accounts.
        * removeAccount(String username): Deletes an existing account.
        * saveDeletionRequest(String username): Requests an account for deletion.
        * updateAccountBalance(Account account): Updates the balance of an existing account.
        * loadAccountRequest(String username): Loads an account request by username.
        * loadAccount(String username): Loads an existing account by username.
        * saveExistingAccount(Account account): Saves an approved account to the existing accounts file.
2. Authentication
    * Description: Manages login procedures for users and the admin.
    * Responsibilities:
        * Verifies credentials against stored data.
    * Methods:
        * verifyUserCredentials(String username, String password): Verifies a user's credentials.
        * verifyAdminCredentials(String username, String password): Verifies an admin's credentials.
        * isPendingApproval(String username): Checks if a username has a pending account request.
3. PasswordUtils
    * Description: Provides utilities for password security.
    * Responsibilities:
        * Hashes passwords using SHA-256.
    * Methods:
        * hashPassword(String password): Hashes a password and returns its Base64 representation.





